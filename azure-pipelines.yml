trigger:
- '*'

variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'release'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      name: "mytest"
      # vmImage: 'ubuntu-20.04'
      # demands:
      # - npm

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '6.x'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - powershell: ./node_modules/.bin/sass $env:wwwrootDir:$env:wwwrootDir --no-source-map #./node_modules/.bin/sass $env:wwwrootDir --output $env:wwwrootDir
      displayName: 'Run node-sass using PowerShell'
      

    #- task: gulp@1
    - powershell: ./node_modules/.bin/gulp
      displayName: 'Run gulp tasks'
    
    - powershell: '"$env:Build_DefinitionName, $env:Build_BuildId, $env:Build_BuildNumber" > buildinfo.txt'
      displayName: 'Write build info using PowerShell'
      workingDirectory: $(wwwrootDir)

    # - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
    #   displayName: 'Write build info'
    #   workingDirectory: $(wwwrootDir)
    ##"$env:Build_DefinitionName, $env:Build_BuildId, $env:Build_BuildNumber" | Out-File -FilePath buildinfo.txt

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop-test

- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  dependsOn: Build
  condition:  succeeded()
  jobs:
  - deployment: Deploy
    pool:
      name: "mytest"
    environment: dev
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-test
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: dev website'
            inputs:
              azureSubscription: 'Azure subscription 1(0a5c3d19-6bfe-44bc-adeb-e011d61044ee)'
              appType: 'webAppLinux'
              appName: '$(WebAppNameDev)'
              package: '$(Pipeline.Workspace)/drop-test/$(buildConfiguration)/*.zip'

- stage: 'Staging'
  displayName: 'Deploy to the staging environment'
  dependsOn: Dev
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-20.04'
    environment: staging
    variables:
    - group: 'Release'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-test
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: staging website'
            inputs:
              azureSubscription: 'Azure subscription 1(0a5c3d19-6bfe-44bc-adeb-e011d61044ee)'
              appType: 'webAppLinux'
              appName: '$(WebAppNameStaging)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'